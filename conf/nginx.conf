# main context - configuring details that affect the entire application
worker_processes  1;        # number of workers
error_log logs/error.log;   # default error file

# events context - configuring global options for handling connections
events {
  worker_connections 1024;
}

# http context - configuring nginx as a web server or reverse proxy
http {
  # change path of temporary directories
  client_body_temp_path temp/nginx-client-body;
  proxy_temp_path temp/nginx-proxy;
  fastcgi_temp_path temp/nginx-fastcgi;
  uwsgi_temp_path temp/nginx-uwsgi;
  scgi_temp_path temp/nginx-scgi;

  # setup upstream configuration
  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
  proxy_next_upstream_tries 2;

  # upstream context - a named pool of servers that Nginx can then proxy requests to (load balancing)
  # upstream [upstream_name] { ... }
  upstream packagers {
    hash $balancer_key consistent;
    server 127.0.0.1:8081 max_fails=0;
    server 127.0.0.1:8080 max_fails=0;
    keepalive 100;
  }

  # server context - allows multiple declarations of virtual servers to handle client requests
  # --> directives that determine whether to select a server block (based on the request IP addr/port or host name)
  server {
    # listen - IP addr/port combination this server block will respond to
    listen 8080;
    # server_name - also used to select a server block (matched to the "Host" header of the request)

    # location context - used to handle a certain type of client request (can be nested within one another)
    # --> component that decides on a location's ability to handle a request (based on the request URI)
    # location [match_modifier] [location_match] { ... }
    location /hello {
      default_type text/html;
      content_by_lua_block {
        ngx.say("<p>hello, world</p>")
      }
    } 
  }

  server {
    listen 8081;

    location /hellonew {
      default_type text/html;
      content_by_lua_block {
        ngx.say("<p>hello, new world</p>")
      }
    }
  }

  server{
    listen 80;
    set $balancer_key 'hellonew';

    location / {
      proxy_pass http://packagers;
    }
  }
}

# Say, for example, that a client requests http://www.example.com/blog on port 80.
# The http, www.example.com, and port 80 components individually would all be used to determine which server block to select.
# After a server is selected, the /blog portion (the request URI), would be evaluated against the defined locations to
# determine which further context should be used to respond to the request.
