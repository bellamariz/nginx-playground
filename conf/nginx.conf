worker_processes auto;        
error_log /dev/stdout info;   

events {
  worker_connections 1024;
}

http {
	# application logging format
	log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"body_bytes_sent": $body_bytes_sent, '
    '"request_time": $request_time, '
    '"response_status": $status, '
    '"request": "$request", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referrer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol"}';
  
	access_log /dev/stdout nginxlog_json;

  # change path of temporary directories
  client_body_temp_path temp/nginx-client-body;
  proxy_temp_path temp/nginx-proxy;
  fastcgi_temp_path temp/nginx-fastcgi;
  uwsgi_temp_path temp/nginx-uwsgi;
  scgi_temp_path temp/nginx-scgi;

  # setup upstream configuration
  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
  proxy_next_upstream_tries 2;

	# the size depends on the number of servers in upstream {}:
  lua_shared_dict upstream_healthcheck 1m;

	# sample upstreams using hash key
  upstream packagers {
    hash $balancer_key consistent;
    server 127.0.0.1:8080 max_fails=0 weight=1;
    server 127.0.0.1:8081 max_fails=0 weight=1;
    keepalive 100;
  }

	# default server with proxy pass to upstreams
  server {
    listen 80 default_server;

		set $balancer_key 'packager1';

		location /mypackagers {
			default_type text/html;
      content_by_lua_block {
				# ngx.say(ngx.var.balancer_key)
        ngx.say("<p>hello, proxy pass to packagers!</p>")
      }

    	proxy_pass http://packagers;
		}

    location ~/healthcheck/?$ {
      default_type text/html;
      return 200 "WORKING";
      expires -1;
      break;
    }
  }

	# upstream 1
	server{
		listen 8080;

		location /packager1{
			default_type text/html;
    	content_by_lua_block {
      	ngx.say("<p>hello, packager 1!</p>")
    	}
		}
	}

	# upstream 2
	server{
		listen 8081;

		location /packager2{
			default_type text/html;
    	content_by_lua_block {
      	ngx.say("<p>hello, packager 2!</p>")
    	}
		}
	}

	# server for verifying upstream and nginx status
	server{
		listen 8380;

		location /upstreams {
      access_log off;
      default_type text/plain;
      content_by_lua_block {
        local hc = require "resty.upstream.healthcheck"
        ngx.print(hc.status_page())
      }
    }

		location /nginx_status {
      stub_status on;
      access_log off;
    }

		location / {
      return 404;
    }
	}
}
