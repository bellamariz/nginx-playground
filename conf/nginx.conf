worker_processes auto;        
error_log /dev/stdout info;   

events {
  worker_connections 1024;
}

http {
  lua_package_path '/usr/local/share/lua/5.1/?.lua;/usr/local/openresty/nginx/conf/?.lua;${prefix}../../?.lua;;';

	# application logging format
	log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"body_bytes_sent": $body_bytes_sent, '
    '"request_time": $request_time, '
    '"response_status": $status, '
    '"request": "$request", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referrer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol"}';
  
	access_log /dev/stdout nginxlog_json;

  # change path of temporary directories
  client_body_temp_path temp/nginx-client-body;
  proxy_temp_path temp/nginx-proxy;
  fastcgi_temp_path temp/nginx-fastcgi;
  uwsgi_temp_path temp/nginx-uwsgi;
  scgi_temp_path temp/nginx-scgi;

  # shared dicts
  lua_shared_dict cached_pass_data 5m;

  # init routine
  init_by_lua_block {
    origin = require "origin"
    cjson = require "cjson"
  }
  
  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

	# sample upstreams using hash key
  upstream ingest_hosts {
    server 0.0.0.1;
    
    balancer_by_lua_block{
      local balancer = require "ngx.balancer"

      local hosts = ngx.ctx.hosts

      if not ngx.ctx.tries then
        ngx.ctx.tries = 0
      end

      # tries the first upstream host twice
      local host, port = hosts[1], "8080"

      # if first host fails, moves to second and third (last)
      if ngx.ctx.tries < 4 then
        if ngx.ctx.tries == 2 then
          host = hosts[2]
        end

        if ngx.ctx.tries == 3 then
          host = hosts[3]
        end

        local ok, err = balancer.set_more_tries(1)
        if not ok then
          return error("failed to set more tries: ", err)
        end
      end
      ngx.ctx.tries = ngx.ctx.tries + 1

      local ok, err = balancer.set_current_peer(host, port)

      if not ok then
        ngx.log(ngx.ERR, "failed to set current peer: ", err)
        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end
    }

    keepalive 100;
  }

	# default server with proxy pass to destination upstreams
  server {
    listen 8080 default_server;

    location / {
      set $finalpath '';

      access_by_lua_block {
        origin.proxy_pass_data()
      }

      set_by_lua_block $finalpath {
        local path = ngx.ctx.path
        return path
      }

      proxy_pass http://ingest_hosts/$finalpath;
    }

    location ~/healthcheck/?$ {
      default_type text/html;
      return 200 "WORKING";
      expires -1;
      break;
    }
  }

	# server for verifying upstream and nginx status
	server{
		listen 8380;

		location /upstreams {
      access_log off;
      default_type text/plain;
      content_by_lua_block {
        local hc = require "resty.upstream.healthcheck"
        ngx.print(hc.status_page())
      }
    }

		location /nginx_status {
      stub_status on;
      access_log off;
    }

		location / {
      return 404;
    }
	}
}
