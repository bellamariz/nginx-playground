worker_processes auto;        
error_log /dev/stdout info;   

events {
  worker_connections 1024;
}

http {
	# application logging format
	log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"body_bytes_sent": $body_bytes_sent, '
    '"request_time": $request_time, '
    '"response_status": $status, '
    '"request": "$request", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referrer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol"}';
  
	access_log /dev/stdout nginxlog_json;

  # change path of temporary directories
  client_body_temp_path temp/nginx-client-body;
  proxy_temp_path temp/nginx-proxy;
  fastcgi_temp_path temp/nginx-fastcgi;
  uwsgi_temp_path temp/nginx-uwsgi;
  scgi_temp_path temp/nginx-scgi;

  # setup upstream configuration
  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
  proxy_next_upstream_tries 2;

  upstream packagers {
    hash $balancer_key consistent;
    server 127.0.0.1:8081 max_fails=0;
    server 127.0.0.1:8080 max_fails=0;
    keepalive 100;
  }

  server {

    listen 8080;

    location /hello {
      default_type text/html;
      content_by_lua_block {
        ngx.say("<p>hello, world</p>")
      }
    } 
  }

  server {
    listen 8081;

    location /hellonew {
      default_type text/html;
      content_by_lua_block {
        ngx.say("<p>hello, new world</p>")
      }
    }
  }

  server{
    listen 80;
    set $balancer_key 'hellonew';

    location / {
      proxy_pass http://packagers;
    }
  }
}
